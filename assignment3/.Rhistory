eta
max(abs(eta))
subgradatsol=-crossprod(Xc, yc) + crossprod(Xc)%*%fitc$b + lam * eta
max(abs(subgradatsol))
lam.vec=10^seq(from=-6, to=log10(max(abs(crossprod(Xc,yc)))), length.out=50)
lam.vec=rev(lam.vec)
bhat.matrix=matrix(NA, nrow=p, ncol=length(lam.vec))
for(j in 1:length(lam.vec))
{
if(j==1)
fitc=NULL
## use warm starting values when j > 1
fitc=minlassoLSwithC(X=X, y=y, lam=lam.vec[j], b=fitc$b,
h=fitc$h, fval=fitc$fval,
tol=1e-12, quiet=TRUE, maxit=1e4,
XtX=fitc$XtX, Xty=fitc$Xty, xbar=fitc$xbar,
ybar=fitc$ybar)
bhat.matrix[,j]=c(fitc$b1, fitc$b)
}
matplot(log10(lam.vec), t(bhat.matrix[-1,]), t="o")
package.skeleton(name="minlasso", code_files="rlasso.R")
diag(c(1,1,1))
source("~/Documents/mcgill/math680/assignment3/bridgeReg.R")
br = bridgeReg(y,X)
source('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
br = bridgeReg(y,X)
br
debugSource('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
br = bridgeReg(y,X)
debugSource('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
br = bridgeReg(y,X)
beta.new
p
X
X
set.seed(680)
n=100; p=10; lambda=1; sigma=1
X=cbind(1, matrix(rnorm(n*p), nrow=n, ncol=p))
Xtilde = scale(X[,-1], scale=FALSE)
beta.star=c(1,runif(p,-5,5))
y=X%*%beta.star + sigma*rnorm(n)
ytilde = scale(y, scale=FALSE)
X
br = bridgeReg(y,X)
X
source('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
br = bridgeReg(y,X)
br
source('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
br = bridgeReg(y,X)
set.seed(123)
n=100
p=10
omega.star=2
## generate the true beta (so some of its entries are zero)
beta.star=rbinom(p, size=1, prob=0.3)*1
th=0.3
sigma=diag(p-1)
for(i in 1:(p-1)) for(j in 1:(p-1))
sigma[i,j]=th^abs(i-j)
eo=eigen(sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
predictor.matrix=matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1))%*%sigma.sqrt
X=cbind(1, predictor.matrix)
y=X%*%beta.star + rnorm(n, mean=0, sd=sqrt(1/omega.star))
y
sigma.sqrt
br = bridgeReg(y,X)
br
data.frame(beta.star, br$b)
data.frame(beta.star[-1], br$b)
source('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
br = bridgeReg(y,X)
br
data.frame(beta.star[-1], br$b)
source('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
br
source('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
br = bridgeReg(y,X)
br
source('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
br = bridgeReg(y,X)
data.frame(beta.star[-1], br$b)
source('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
br = bridgeReg(y,X)
br
source('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
br = bridgeReg(y,X)
br
set.seed(123)
n=1000
p=300
omega.star=2
## generate the true beta (so some of its entries are zero)
beta.star=rbinom(p, size=1, prob=0.3)*1
th=0.3
sigma=diag(p-1)
for(i in 1:(p-1)) for(j in 1:(p-1))
sigma[i,j]=th^abs(i-j)
eo=eigen(sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
predictor.matrix=matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1))%*%sigma.sqrt
X=cbind(1, predictor.matrix)
y=X%*%beta.star + rnorm(n, mean=0, sd=sqrt(1/omega.star))
br = bridgeReg(y,X)
br
plot(beta.star[-1], br$b)
beta.star = rnorm(0,2)
beta.star = rnorm(p,0,2)
beta.star
beta.star = rnorm(p,0,2)
th=0.3
sigma=diag(p-1)
for(i in 1:(p-1)) for(j in 1:(p-1))
sigma[i,j]=th^abs(i-j)
eo=eigen(sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
predictor.matrix=matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1))%*%sigma.sqrt
X=cbind(1, predictor.matrix)
y=X%*%beta.star + rnorm(n, mean=0, sd=sqrt(1/omega.star))
br = bridgeReg(y,X)
br
plot(beta.star[-1], br$b); abline=(0,1)
set.seed(123)
n=200
p=300
omega.star=2
## generate the true beta (so some of its entries are zero)
#beta.star=rbinom(p, size=1, prob=0.3)*1
beta.star = rnorm(p,0,2)
th=0.3
sigma=diag(p-1)
for(i in 1:(p-1)) for(j in 1:(p-1))
sigma[i,j]=th^abs(i-j)
eo=eigen(sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
predictor.matrix=matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1))%*%sigma.sqrt
X=cbind(1, predictor.matrix)
y=X%*%beta.star + rnorm(n, mean=0, sd=sqrt(1/omega.star))
br = bridgeReg(y,X)
set.seed(123)
n=200
p=300
omega.star=2
## generate the true beta (so some of its entries are zero)
#beta.star=rbinom(p, size=1, prob=0.3)*1
beta.star = rnorm(p,0,2)
th=0.3
sigma=diag(p-1)
for(i in 1:(p-1)) for(j in 1:(p-1))
sigma[i,j]=th^abs(i-j)
eo=eigen(sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
predictor.matrix=matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1))%*%sigma.sqrt
X=cbind(1, predictor.matrix)
y=X%*%beta.star + rnorm(n, mean=0, sd=sqrt(1/omega.star))
br = bridgeReg(y,X,alpha=0.1)
set.seed(123)
n=200
p=300
omega.star=2
## generate the true beta (so some of its entries are zero)
#beta.star=rbinom(p, size=1, prob=0.3)*1
beta.star = rnorm(p,0,2)
th=0.3
sigma=diag(p-1)
for(i in 1:(p-1)) for(j in 1:(p-1))
sigma[i,j]=th^abs(i-j)
eo=eigen(sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
predictor.matrix=matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1))%*%sigma.sqrt
X=cbind(1, predictor.matrix)
y=X%*%beta.star + rnorm(n, mean=0, sd=sqrt(1/omega.star))
br = bridgeReg(y,X,alpha=1.1)
debugSource('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
set.seed(123)
n=200
p=300
omega.star=2
## generate the true beta (so some of its entries are zero)
#beta.star=rbinom(p, size=1, prob=0.3)*1
beta.star = rnorm(p,0,2)
th=0.3
sigma=diag(p-1)
for(i in 1:(p-1)) for(j in 1:(p-1))
sigma[i,j]=th^abs(i-j)
eo=eigen(sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
predictor.matrix=matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1))%*%sigma.sqrt
X=cbind(1, predictor.matrix)
y=X%*%beta.star + rnorm(n, mean=0, sd=sqrt(1/omega.star))
br = bridgeReg(y,X,alpha=1.1)
mvec
head(crossprod(Xc))
head(diag(mvec))
mvec
set.seed(123)
n=200
p=300
omega.star=2
## generate the true beta (so some of its entries are zero)
#beta.star=rbinom(p, size=1, prob=0.3)*1
beta.star = rnorm(p,0,2)
th=0.3
sigma=diag(p-1)
for(i in 1:(p-1)) for(j in 1:(p-1))
sigma[i,j]=th^abs(i-j)
eo=eigen(sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
predictor.matrix=matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1))%*%sigma.sqrt
X=cbind(1, predictor.matrix)
y=X%*%beta.star + rnorm(n, mean=0, sd=sqrt(1/omega.star))
br = bridgeReg(y,X,alpha=1.1)
mvec
mvec
mvec
mvec
qr.solve(crossprod(Xc)+lam*diag(mvec))
dim(diag(mvec))
diag(mvec)
head(mvec)
diag(mvec)
diag(mvec,length(mvec))
mvec = abs(beta.cur)^(alpha-2)
M=matrix(0,p,p)
M
source('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
set.seed(123)
n=200
p=300
omega.star=2
## generate the true beta (so some of its entries are zero)
#beta.star=rbinom(p, size=1, prob=0.3)*1
beta.star = rnorm(p,0,2)
th=0.3
sigma=diag(p-1)
for(i in 1:(p-1)) for(j in 1:(p-1))
sigma[i,j]=th^abs(i-j)
eo=eigen(sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
predictor.matrix=matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1))%*%sigma.sqrt
X=cbind(1, predictor.matrix)
y=X%*%beta.star + rnorm(n, mean=0, sd=sqrt(1/omega.star))
br = bridgeReg(y,X,alpha=1.1)
source('~/Documents/mcgill/math680/assignment3/bridgeReg.R', echo=TRUE)
set.seed(123)
n=200
p=300
omega.star=2
## generate the true beta (so some of its entries are zero)
#beta.star=rbinom(p, size=1, prob=0.3)*1
beta.star = rnorm(p,0,2)
th=0.3
sigma=diag(p-1)
for(i in 1:(p-1)) for(j in 1:(p-1))
sigma[i,j]=th^abs(i-j)
eo=eigen(sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
predictor.matrix=matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1))%*%sigma.sqrt
X=cbind(1, predictor.matrix)
y=X%*%beta.star + rnorm(n, mean=0, sd=sqrt(1/omega.star))
br = bridgeReg(y,X,alpha=1.1)
br
plot(beta.star[-1],br$b)
set.seed(123)
n=200
p=50
omega.star=2
## generate the true beta (so some of its entries are zero)
#beta.star=rbinom(p, size=1, prob=0.3)*1
beta.star = rnorm(p,0,2)
th=0.3
sigma=diag(p-1)
for(i in 1:(p-1)) for(j in 1:(p-1))
sigma[i,j]=th^abs(i-j)
eo=eigen(sigma, symmetric=TRUE)
sigma.sqrt=eo$vec%*%diag(eo$val^0.5)%*%t(eo$vec)
predictor.matrix=matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1))%*%sigma.sqrt
X=cbind(1, predictor.matrix)
y=X%*%beta.star + rnorm(n, mean=0, sd=sqrt(1/omega.star))
br = bridgeReg(y,X)
br
plot(beta.star[-1],br$b)
sign(1)
sign(-1)
sign(0)
beta.br = br$b
beta.br
Xc = scale(X[,-1], scale=FALSE)
dim(Xc)
yc = scale(y, scale=FALSE)
length(yc)
sign(c(1,-1,1,0))
sign(beta.br)
alpha=1.5
lambda=1
grad.br = -2*crossprod(Xc,yc) - 2*crossprod(Xc,Xc%*%beta.br) + lam*sign(beta.br)*abs(beta.br)^alpha-1
grad.br
grad.br = crossprod(Xc,yc) - crossprod(Xc,Xc%*%beta.br) + lam*sign(beta.br)*abs(beta.br)^alpha-1
grad.br
grad.br = -crossprod(Xc,yc) + crossprod(Xc,Xc%*%beta.br) + lam*sign(beta.br)*abs(beta.br)^alpha-1
grad.br
lambda=1
alpha=1.5
br = bridgeReg(y,X,lam=1, alpha=1.5)
beta.br = br$b
grad.br = -2*crossprod(Xc,yc) - 2*crossprod(Xc,Xc%*%beta.br) + lam*sign(beta.br)*abs(beta.br)^alpha-1
grad.br
lam
grad.br = -2*crossprod(Xc,yc) - 2*crossprod(Xc,Xc%*%beta.br) + lambda*sign(beta.br)*abs(beta.br)^alpha-1
grad.br
lambda
grad.br = -2*crossprod(Xc,yc) - 2*crossprod(Xc,Xc%*%beta.br) + lambda*sign(beta.br)*abs(beta.br)^alpha-1
lambda
grad.br
grad.br = -crossprod(Xc,yc) - crossprod(Xc,Xc%*%beta.br) + lambda*sign(beta.br)*abs(beta.br)^alpha-1
grad.br
grad.br = -crossprod(Xc,yc) + crossprod(Xc,Xc%*%beta.br) + lambda*sign(beta.br)*abs(beta.br)^alpha-1
grad.br
grad.br = -crossprod(Xc,yc) + crossprod(Xc)%*%beta.br + lambda*sign(beta.br)*abs(beta.br)^alpha-1
grad.br
alpha
grad.br = -crossprod(Xc,yc) + crossprod(Xc)%*%beta.br + lambda*abs(beta.br)^alpha-1
grad.br
alpha-1
grad.br = -crossprod(Xc,yc) + crossprod(Xc)%*%beta.br + lambda*sign(beta.br)*abs(beta.br)^alpha-1
grad.br
br = bridgeReg(y,X,lam=1, alpha=1.5, tol=1e-18)
beta.br = br$b
beta.br
grad.br = -crossprod(Xc,yc) + crossprod(Xc)%*%beta.br + lambda*sign(beta.br)*abs(beta.br)^alpha-1
grad.br
br = bridgeReg(y,X,lam=1, alpha=1.5)
beta.br = br$b
grad.br = -crossprod(Xc,yc) + crossprod(Xc)%*%beta.br + lambda*sign(beta.br)*abs(beta.br)^alpha-1
grad.br
br
ilogit=function(u) return( exp(u)/(1+exp(u)))
ilogit(4)
ilogit(0)
ilogit(1)
ilogit(exp(1))
ilogit(logit(17))
ilogit(logit(0.6))
c(2,3,4)*c(1,2,3)
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
set.seed(50)
n=10
p=5
X=cbind(1, matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1)))
beta.star=rnorm(p, mean=0, sd=1/sqrt(p))
beta.star
n.list=rep(30, n)
pi.list=ilogit(as.numeric(X%*%beta.star))
pi.list
y = rbinom(n=n, size=n.list, prob=pi.list)/n.list
y
bl = bridgeLogistic(y,X,n.list)
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
debugSource('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
debugSource('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
M
W
X
W%*%X
crossprod(X,W%*%X)
lam*(alpha-1)*M
crossprod(X,W%*%X) + lam*(alpha-1)*M
debugSource('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
dim(crossprod(X,W%*%X))
dim(lam*(alpha-1)*M)
crossprod(X,W%*%X) + lam*(alpha-1)*M
crossprod(X, n.list*(eta-y))
lam*sign(beta)*abs(beta)^(alpha-1)
crossprod(X, n.list*(eta-y)) + lam*sign(beta)*abs(beta)^(alpha-1)
return( crossprod(X,W%*%X) + lam*(alpha-1)*M )
bl = bridgeLogistic(y,X,n.list)
debugSource('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
crossprod(X, n.list*(eta-y)) + lam*sign(beta)*abs(beta)^(alpha-1)
debugSource('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
g
hs
hs%*%g
beta.cur
beta.cur-hs%*%g
bl = bridgeLogistic(y,X,n.list)
beta.cur
eta
crossprod(X, n.list*(eta-y))
eta-y
y
eta
source('~/.active-rstudio-document', echo=TRUE)
debugSource('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
beta
X
t(beta)
crossprod(beta,t(X))
debugSource('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
X%*%beta
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
debugSource('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
crossprod(X,W%*%X) + lam*(alpha-1)*M
qr.solve(crossprod(X,W%*%X) + lam*(alpha-1)*M)
bl = bridgeLogistic(y,X,n.list)
qr.solve(crossprod(X,W%*%X) + lam*(alpha-1)*M)
qr.solve(crossprod(X,W%*%X) + lam*(alpha-1)*M)
qr.solve(crossprod(X,W%*%X) + lam*(alpha-1)*M)
qr.solve(crossprod(X,W%*%X) + lam*(alpha-1)*M)
crossprod(X,W%*%X) + lam*(alpha-1)*M
eta
X%*%beta
ilogit(-3218.641276)
ilogit(1579.086187)
library(boot)
inv.logit(X%*%beta)
ilogit(as.numeric(1579.086187))
ilogit(as.numeric(X%*%beta))
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
ilogit=function(u) return( require(boot); return(inv.logit(u)))
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
bl
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
bl
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
bl
beta
beta.star
n.list
bl = bridgeLogistic(y,X,n.list,lam=0.001)
bl
bl = bridgeLogistic(y,X,n.list)
bl
y
X
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
bl
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
bl
3^1.5
-3^1.5
(-3)^1.5
sign(beta.star)
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
bl
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
bl
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
source('~/Documents/mcgill/math680/assignment3/bridgeLogistic.R', echo=TRUE)
bl = bridgeLogistic(y,X,n.list)
bl
data.frame(beta.star, bl$b)
grad(y,X,n.list,lam,alpha,bl$b)
X
bl$b
grad(X,y,n.list,lam,alpha,bl$b)
grad(X,y,n.list,lam,alpha,beta.star)
set.seed(50)
n=100
p=5
X=cbind(1, matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1)))
beta.star=rnorm(p, mean=0, sd=1/sqrt(p))
n.list=rep(30, n)
pi.list=ilogit(as.numeric(X%*%beta.star))
y = rbinom(n=n, size=n.list, prob=pi.list)/n.list
bl = bridgeLogistic(y,X,n.list)
bl
data.frame(beta.star, bl$b)
grad(X,y,n.list,lam,alpha,beta.star)
alpha
lam
grad(X,y,n.list,lam=1,alpha=1.5,beta.star)
n.list
set.seed(50)
n=100
p=15
X=cbind(1, matrix(rnorm(n*(p-1)), nrow=n, ncol=(p-1)))
beta.star=rnorm(p, mean=0, sd=1/sqrt(p))
n.list=rep(30, n)
pi.list=ilogit(as.numeric(X%*%beta.star))
y = rbinom(n=n, size=n.list, prob=pi.list)/n.list
bl = bridgeLogistic(y,X,n.list)
data.frame(beta.star, bl$b)
